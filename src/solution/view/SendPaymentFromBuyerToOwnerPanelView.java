/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package solution.view;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.List;
import solution.control.RegistryServiceControl;
import solution.model.GetAddressInfoModel;
import solution.model.ListUnspentModel;
import solution.service.StringsService;

/**
 *
 * @author ssd
 */
public class SendPaymentFromBuyerToOwnerPanelView extends javax.swing.JPanel {
    private String walletOwnerAddress;
    /**
     * Creates new form sendPaymentFromBuyerToOwnerPanel
     */
    public SendPaymentFromBuyerToOwnerPanelView() {
        initComponents();
        
        // get payment amount that is already set/fixed as a public static double variable
        double paymentAmount = StringsService.paymentAmount;
        // inform payment amount on UI
        paymentAmountTextField.setText(Double.toString(paymentAmount)); 
        // get the Owner wallet address that is already set/fixed as a public static String variable
        walletOwnerAddress = StringsService.PLATFORM.getWALLET_ADDRESS_OWNER();
        // inform the Owner wallet address on UI
        walletOwnerAddressTextField.setText(walletOwnerAddress);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sendPaymentLabel = new javax.swing.JLabel();
        walletOwnerAddressLabel = new javax.swing.JLabel();
        walletOwnerAddressTextField = new java.awt.TextField();
        paymentAmountLabel = new javax.swing.JLabel();
        paymentAmountTextField = new java.awt.TextField();
        sendPaymentButton = new javax.swing.JButton();
        transactionIdOfPaymentSentToOwnerAddressLabel = new javax.swing.JLabel();
        transactionIdOfPaymentSentToOwnerAddressTextField = new java.awt.TextField();

        setBackground(new java.awt.Color(247, 247, 247));

        sendPaymentLabel.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        sendPaymentLabel.setText("Send Payment");

        walletOwnerAddressLabel.setText("Owner Wallet Address:");

        walletOwnerAddressTextField.setBackground(new java.awt.Color(248, 248, 248));
        walletOwnerAddressTextField.setEditable(false);

        paymentAmountLabel.setText("Payment Amount:");

        paymentAmountTextField.setBackground(new java.awt.Color(255, 255, 255));

        sendPaymentButton.setText("Send Payment");
        sendPaymentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendPaymentButtonActionPerformed(evt);
            }
        });

        transactionIdOfPaymentSentToOwnerAddressLabel.setText("Transaction ID of Payment Sent to Owner Address:");

        transactionIdOfPaymentSentToOwnerAddressTextField.setBackground(new java.awt.Color(248, 248, 248));
        transactionIdOfPaymentSentToOwnerAddressTextField.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(walletOwnerAddressLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(walletOwnerAddressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(sendPaymentLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(paymentAmountLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(paymentAmountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(sendPaymentButton)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(transactionIdOfPaymentSentToOwnerAddressLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(transactionIdOfPaymentSentToOwnerAddressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sendPaymentLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(walletOwnerAddressLabel)
                    .addComponent(walletOwnerAddressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paymentAmountLabel)
                    .addComponent(paymentAmountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(sendPaymentButton)
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(transactionIdOfPaymentSentToOwnerAddressLabel)
                    .addComponent(transactionIdOfPaymentSentToOwnerAddressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(126, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void sendPaymentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendPaymentButtonActionPerformed
        
        String paymentRawTransactionHex = null;
        // get Buyer wallet address that is already set/fixed as a public static String variable
        String walletBuyerAddress = StringsService.PLATFORM.getWALLET_ADDRESS_BUYER();

        BigDecimal minimumAmount = new BigDecimal(paymentAmountTextField.getText()).setScale(5, RoundingMode.DOWN);
        // add transaction fee of 0.00001 or 1000 sats
        BigDecimal minimumAmountConsideringTxFee = minimumAmount.add(new BigDecimal(Double.toString(StringsService.transactionFee)).setScale(5, RoundingMode.DOWN));
        
        List<ListUnspentModel>  listUnspentModelList = RegistryServiceControl.listUnspent(
            StringsService.PLATFORM.getWALLET_NAME_BUYER(),
            walletBuyerAddress,
            minimumAmountConsideringTxFee.doubleValue());

        if (listUnspentModelList.isEmpty()) {
            transactionIdOfPaymentSentToOwnerAddressTextField.setText("It cannot create paymento transaction because listUnspent list is empty");
            //            paymentRawTransactionHexTextField.setVisible(true);
        } else {
            // get the first unspent tx id 
            // (it works for the solution concept because it assumes that the Buyer wallet always has enough funds,
            // but it would have to be fixed for a business application)    
            String txId = listUnspentModelList.get(0).getTxid();
            // get the first index number for a transaction output
            long vout = listUnspentModelList.get(0).getVout();
            
            // get amount available on the first unspent tx id
            BigDecimal amount = BigDecimal.valueOf(listUnspentModelList.get(0).getAmount());
            
            // set payment amount informed on UI
            BigDecimal paymentAmount = BigDecimal.valueOf(Double.parseDouble(paymentAmountTextField.getText()));
            
            // get change value by subtracting amount available on the first unspent tx id from the payment amount
            BigDecimal change = amount.subtract(paymentAmount);
            // sutract 0.00001 BTC from the change value, so that the 0.00001 BTC amount is used to pay for transaction fee
            BigDecimal changeMinusTxFee = change.subtract(new BigDecimal(StringsService.transactionFee).setScale(5, RoundingMode.DOWN)); 
            // create raw transaction with a set change value of 0.00001 BTC 
            paymentRawTransactionHex = RegistryServiceControl.createRawTransactionWithChangeAddress(
                txId, // transaction id
                vout, // positon of the transaction output 
                walletOwnerAddress, // Owner wallet address
                Double.parseDouble(paymentAmount.toString()), // payment amount
                walletBuyerAddress, // Buyer wallet address
                Double.parseDouble(changeMinusTxFee.toString())); // change minus transaction fee
            // sign raw transaction with Buyer wallet
            String signedTx = RegistryServiceControl.signRawTransactionWithWallet(paymentRawTransactionHex, StringsService.PLATFORM.getWALLET_NAME_BUYER());
            // get transaction id of payment sent from Buyer to Owner
            String txIdOfPaymentSentToOwnerAddress = RegistryServiceControl.sendRawTransaction(
                signedTx,
                StringsService.PLATFORM.getWALLET_NAME_BUYER());
            transactionIdOfPaymentSentToOwnerAddressTextField.setText(txIdOfPaymentSentToOwnerAddress);

            // generate 6 new blocks after sending payment
            List<String> blockHashList = RegistryServiceControl.generateToAddress(6);            
        }
        
    }//GEN-LAST:event_sendPaymentButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel paymentAmountLabel;
    private java.awt.TextField paymentAmountTextField;
    private javax.swing.JButton sendPaymentButton;
    private javax.swing.JLabel sendPaymentLabel;
    private javax.swing.JLabel transactionIdOfPaymentSentToOwnerAddressLabel;
    private java.awt.TextField transactionIdOfPaymentSentToOwnerAddressTextField;
    private javax.swing.JLabel walletOwnerAddressLabel;
    private java.awt.TextField walletOwnerAddressTextField;
    // End of variables declaration//GEN-END:variables
}
